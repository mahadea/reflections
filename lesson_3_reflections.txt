When would you want to use a remote repository rather than keeping all your work local?
when I want to share my work with other people who can then clone my repository and make their contributions or if I am
likely to work on multiple computers then I can use git hub to check in and check out my code.

Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository?
	If Git stays uptodate with remote then changes I have made locally that are not ready to be 'published' will get automatically pushed to remote as well.  So better to manually push and pull.

Describe the differences between forks, clones, and branches. When would you use one instead of another?
	fork is when you create a copy of a repository within github.  You would use fork when you want to work off an existing repository that someone else has created and you want to continue the parentage
	clone is when you make a copy of a repository from github to your PC.  you want to clone when you want to do some serious work that can only be done on the PC, typically programming/coding type activities
	branch is when you are working on your PC but want to try out things not directly related to what the main line of work is.

What is the benefit of having a copy of the last known state of the remote stored locally?
	If I'm going to be offline for a while then it's good to have a local copy of the most recent version of the remote.  I can use this local copy then to compare with what I have in my computer (via diff) to see what's changed and if I need to merge and so on.

How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?
	W/o a tool like git or git hub collaboration would be very difficult.  I would have to find some common location to store my artifacts that others could access and we would have to rely on comments inline to indicate what was changed.  For two people to work in parallel would be very tricky as we would have to eyeball the elements to see what each of us did.

When would you want to make changes in a separate branch rather than directly in master? What benefits does each approach have?
	By making it in a different branch I can have someone review my changes via a pull request before modifying master.  So if I have goofed up I won't break what's in master.
	By making it directly in master the process is much faster and the change is available to anyone executing the application much quicker	